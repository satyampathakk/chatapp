import AsyncStorage from '@react-native-async-storage/async-storage';
import { getUsername } from './Storage';
import { router } from 'expo-router';
import axios from 'axios';
import testOnionRequest from '../utils/testOnion';

let DEFAULT_IP_ADDRESS = 'http://16.171.206.219:80';
const ORBOT_HTTP_PROXY = 'http://127.0.0.1:8118'; 
const onionAddress = 'http://hwbl6cafsrwrcb4ulrsgst3jzfaf22a222744ovygty3ugkpnimygfid.onion/';

export const setDefaultIPAddress = (ipAddress) => {
  DEFAULT_IP_ADDRESS = ipAddress;
};

export const saveIPAddress = async (ipAddress) => {
  try {
    const usr = await getUsername();

    // Create an Axios instance with Orbot's HTTP proxy
    // const proxyAxios = axios.create({
    //   baseURL: ORBOT_HTTP_PROXY,
    //   headers: {
    //     'Content-Type': 'application/json',
    //   },
    // });
    const response = await axios.get(onionAddress, {
      proxy: {
          host: '127.0.0.1',
          port: 9050,
      },
      timeout: 5000, // Optional timeout setting
  });

  console.log(response.data);

    // Send a POST request to the onion address through the HTTP proxy
    // const res = await proxyAxios.post(onionAddress, { username: usr });

    // if (res.status === 200) {
    //   console.log("Request was successful");
    // } else {
    //   console.log("Request failed with status:", res.status);
    // }

    // Save the IP address or onion address in AsyncStorage
    await AsyncStorage.setItem('ipAddress', ipAddress);
    console.log('IP address saved successfully');
  } catch (error) {
    if (axios.isAxiosError(error)) {
        console.error('Error saving IP address:', error.message);
        console.error('Error response:', error.response ? error.response.data : 'No response data');
        console.error('Error config:', error.config);
    } else {
        console.error('An unexpected error occurred:', error);
    }
}

};

export const getIPAddress = async () => {
  try {
    let ipAddress = await AsyncStorage.getItem('ipAddress');
    if (ipAddress !== null) {
      return ipAddress; 
    } else {
      return DEFAULT_IP_ADDRESS;
    }
  } catch (error) {
    console.error('Error retrieving IP address:', error);
    return DEFAULT_IP_ADDRESS;
  }
};

export const clearIPAddress = async () => {
  try {
    await AsyncStorage.removeItem('ipAddress');
    console.log('IP address cleared successfully');
    router.push("/");
  } catch (error) {
    console.error('Error clearing IP address:', error);
  }
};
