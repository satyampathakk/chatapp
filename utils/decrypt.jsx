import * as openpgp from 'openpgp/dist/openpgp'
const decrypt=async(mes)=>{
    const privateKeyArmored =`-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: Keybase OpenPGP v1.0.0
Comment: https://keybase.io/crypto

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
LAoWL8i9gB1woBNSng==
=mY0i
-----END PGP PRIVATE KEY BLOCK-----`;
console.log(mes);
const decmes= await openpgp.readMessage({armoredMessage: mes});
let passphrase="hello";
const priKey = await openpgp.decryptKey({
    privateKey: await openpgp.readPrivateKey({ armoredKey: privateKeyArmored }),
    passphrase
  });
    const encMes=await openpgp.decrypt({ message: decmes, decryptionKeys : priKey});
    console.log(encMes);
}
export default decrypt